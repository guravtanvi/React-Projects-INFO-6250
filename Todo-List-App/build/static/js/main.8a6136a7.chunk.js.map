{"version":3,"sources":["spinner.svg","context/TodoContext.js","ChangeTheme.jsx","SortTodos.jsx","FilterTodos.jsx","context/Constants.js","TodoList.jsx","LoginPage.jsx","HomePage.jsx","Navigation.jsx","App.jsx","serviceWorker.js","context/TodoReducer.js","context/types.js","messages.js","services.js","context/TodoState.js","index.js"],"names":["module","exports","TodoContext","React","createContext","ChangeTheme","todoContext","useContext","useEffect","getTheme","username","className","value","theme","onChange","e","val","target","setTheme","SortTodos","taskOrderFilter","sortTasksByOrder","disabled","taskDoneFilter","sortTasksByDone","FilterTodos","taskStatusFilter","filterTasksByStatus","constants","DONE","ALL","SELECT","ACTIVE","COMPLETE","ASCENDING","DESCENDING","NOTDONE","DEFAULT_THEME","TRUE","FALSE","TodoList","useState","task","setTodoTask","getAllTasks","toggleTodo","id","updateTask","deleteTask","type","placeholder","onClick","preventDefault","addNewTask","refreshTasks","Object","values","tasks","filter","done","map","index","key","taskId","checked","name","contentEditable","LoginPage","loading","setLoadingState","user","setUserState","alt","src","loadinglogo","setLoginStatus","HomePage","container","getLoginStatus","isLoggedIn","toUpperCase","error","Navigation","networkError","setLogout","App","Boolean","window","location","hostname","match","state","action","data","status","messages","DEFAULT","NETWORK_ERROR","USERNAME_MANDATORY","TASK_MANDATORY","getNetworkError","err","code","validateResponse","response","ok","json","then","Promise","reject","fetchUpdateTask","fetch","method","headers","Headers","body","JSON","stringify","catch","TodoState","props","initialState","useReducer","TodoReducer","dispatch","removeTaskByKey","assign","entries","k","v","sortTasksByAsc","sort","a","b","sortTasksByDesc","getObjectList","list","reduce","obj","item","sortByDone","sortByNotDone","Provider","userInfo","fetchLoginPage","themeVal","fetchUpdateTheme","fetchPageTheme","themeInfo","fetchTodoList","taskInfo","taskName","fetchAppendTask","message","remove","text","children","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.8a6136a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.05360875.svg\";","import React from 'react';\n\nconst TodoContext = React.createContext({});\n\nexport default TodoContext;","import React, { useEffect, useContext } from 'react';\nimport TodoContext from './context/TodoContext';\n\nconst ChangeTheme = () => {\n  const todoContext = useContext(TodoContext);\n\n  useEffect(() => {\n    todoContext.getTheme(todoContext.username);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const changeTheme = (e) => {\n    let val = e.target.value;\n    todoContext.setTheme(todoContext.username, val);\n  };\n  return (\n    <select className=\"theme\" value={todoContext.theme} onChange={changeTheme}>\n      <option value=\"dark\">Dark-Theme</option>\n      <option value=\"light\">Light-Theme</option>\n      <option value=\"cool\">Cool-Theme</option>\n    </select>\n  );\n};\n\nexport default ChangeTheme;\n","import React, { useContext } from 'react';\nimport TodoContext from './context/TodoContext';\n\nconst SortTodos = () => {\n  const todoContext = useContext(TodoContext);\n  \n  const sortByDone = (e) => {\n    todoContext.sortTasksByDone(e.target.value);\n  };\n\n  const sortByOrder = (e) => {\n    todoContext.sortTasksByOrder(e.target.value);\n  };\n\n\n  return (\n    <span className=\"sort-container\">\n      <label className=\"task-sort-label\">Sort By:</label>\n      <span className=\"select-sort\">\n        <label></label>\n        <select\n          className=\"sort-alphabetically filter-height\"\n          value={todoContext.taskOrderFilter}\n          onChange={sortByOrder}\n        >\n          <option value=\"select option\" disabled>\n            Select\n          </option>\n          <option value=\"ascending\">Ascending</option>\n          <option value=\"descending\">Descending</option>\n        </select>\n        <label>Task Done/Task Not-Done</label>\n        <select\n          className=\"sort-by-status filter-height\"\n          value={todoContext.taskDoneFilter}\n          onChange={sortByDone}\n        >\n          <option value=\"select option\" disabled>\n            Select\n          </option>\n          <option value=\"done\">Done</option>\n          <option value=\"notdone\">Not Done</option>\n        </select>\n      </span>\n    </span>\n  );\n};\n\nexport default SortTodos;\n","import React, { useContext } from 'react';\nimport TodoContext from './context/TodoContext';\nimport SortTodos from './SortTodos';\n\nconst FilterTodos = () => {\n  const todoContext = useContext(TodoContext);\n\n  const filterTasksByStatus = (e) => {\n    todoContext.filterTasksByStatus(e.target.value);\n  };\n\n  return (\n    <div className=\"filter\">\n      <span className=\"filter-container\">\n        <label className=\"filter-label\">Filter:</label>\n        <select\n          className=\"filter-task filter-height\"\n          value={todoContext.taskStatusFilter}\n          onChange={filterTasksByStatus}\n        >\n          <option value=\"all\">All Tasks</option>\n          <option value=\"active\">Active Tasks</option>\n          <option value=\"complete\">Complete Tasks</option>\n        </select>\n      </span>\n      <SortTodos />\n    </div>\n  );\n};\n\nexport default FilterTodos;\n","const constants = {\n    DONE: 'done',\n    ALL: 'all',\n    SELECT: 'select option',\n    ACTIVE: 'active',\n    COMPLETE: 'complete',\n    ASCENDING: 'ascending',\n    DESCENDING: 'descending',\n    NOTDONE: 'notdone',\n    DEFAULT_THEME: 'light',\n    TRUE: true,\n    FALSE: false\n}\n\nexport default constants;","import React, { useState, useEffect, useContext } from 'react';\nimport TodoContext from './context/TodoContext';\nimport FilterTodos from './FilterTodos';\nimport constants from './context/Constants';\n\nconst TodoList = () => {\n  const todoContext = useContext(TodoContext);\n  const [task, setTodoTask] = useState('');\n\n  useEffect(() => {\n    todoContext.getAllTasks(todoContext.username);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const appendTask = (e) => {\n    e.preventDefault();\n    todoContext.addNewTask(todoContext.username, task);\n    setTodoTask('');\n  };\n\n  const onChange = (e) => setTodoTask(e.target.value);\n\n  const toggleTodo = (e) => {\n    todoContext.toggleTodo(e.target.id);\n  };\n\n  const updateTask = (e) => {\n    todoContext.updateTask(e.target.id, e.target.value);\n  };\n\n  const deleteTask = (e) => {\n    todoContext.deleteTask(e.target.id);\n  };\n\n  const refreshTask = () => {\n    todoContext.getAllTasks(todoContext.username);\n    todoContext.refreshTasks();\n  };\n\n  return (\n    <div>\n      <div className=\"todo-container\">\n        <FilterTodos />\n        <div className=\"add-todo-container\">\n          <input\n            className=\"todo-input\"\n            onChange={onChange}\n            value={task}\n            type=\"text\"\n            placeholder=\"Enter Todo Task here\"\n          />\n          <button className=\"btn-todo-add\" onClick={appendTask}>\n            Add Task\n          </button>\n          <button className=\"btn-refresh\" onClick={refreshTask}>\n            Refresh\n          </button>\n          <div className=\"todo-display\">\n            <ul>\n              {Object.values(todoContext.tasks)\n                .filter((task) =>\n                  todoContext.taskStatusFilter === constants.COMPLETE\n                    ? task.done === constants.TRUE\n                    : constants.TRUE\n                )\n                .filter((task) =>\n                  todoContext.taskStatusFilter === constants.ACTIVE\n                    ? task.done === constants.FALSE\n                    : constants.TRUE\n                )\n                .map((task, index) => (\n                  <li key={index}>\n                    <input\n                      id={task.taskId}\n                      className=\"todo-checkbox\"\n                      type=\"checkbox\"\n                      checked={task.done ? 'checked' : ''}\n                      onChange={toggleTodo}\n                    />\n                    <input\n                      type=\"text\"\n                      id={task.taskId}\n                      className={`todo ${task.done ? 'todo complete' : 'todo'}`}\n                      value={task.name}\n                      onChange={updateTask}\n                      contentEditable=\"true\"\n                    />\n\n                    <button\n                      id={task.taskId}\n                      className=\"task-delete\"\n                      onClick={deleteTask}\n                    >\n                      X\n                    </button>\n                  </li>\n                ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React, { useState, useContext } from 'react';\nimport TodoContext from './context/TodoContext';\nimport loadinglogo from './spinner.svg';\n\n\nconst LoginPage = () => {\n\n  const [loading, setLoadingState] = useState(false);\n  const [user, setUserState] = useState('');\n  const todoContext = useContext(TodoContext);\n  const setLogin = () => {\n    setLoadingState(true);\n    todoContext.setLoginStatus(user);\n    setLoadingState(false);\n  };\n\n  return (\n    <div className=\"login-page\">\n      <input\n        className=\"user-details\"\n        placeholder=\"Enter Login Username\"\n        onChange={(e) => setUserState(e.target.value)}\n      />\n      {loading ? (\n        <img alt=\"loadinglogo\" src={loadinglogo} />\n      ) : (\n        <button className=\"login-button\" onClick={setLogin}>\n          Login\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import React, { useContext, useEffect, Fragment } from 'react';\nimport TodoContext from './context/TodoContext';\nimport ChangeTheme from './ChangeTheme';\nimport TodoList from './TodoList';\nimport LoginPage from './LoginPage';\n\nconst HomePage = () => {\n  const todoContext = useContext(TodoContext);\n\n  useEffect(\n    () => {\n      todoContext.getLoginStatus();\n      \n    },// eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  let container;\n\n  if (todoContext.isLoggedIn) {\n    container = (\n      <Fragment>\n        <div className=\"welcome-note\">\n          Welcome, {todoContext.username.toUpperCase()}!!   Pick Your Theme:\n          <ChangeTheme />\n        </div>\n        <p className=\"error-note\">{todoContext.error}</p>\n        <TodoList />\n      </Fragment>\n    );\n  } else {\n    container = <LoginPage />;\n  }\n  return <div>{container}</div>;\n};\n\nexport default HomePage;\n","import React, { useContext } from 'react';\n\nimport TodoContext from './context/TodoContext';\n\nconst Navigation = () => {\n  const todoContext = useContext(TodoContext);\n\n  const logout = () => {\n    todoContext.setLogout();\n  };\n\n  return (\n    <div>\n      <div className=\"header\">MANAGE TODO LIST</div>\n      <div className=\"error-note\">{todoContext.networkError}</div>\n      <ul className=\"nav\">\n        {todoContext.isLoggedIn && (\n          <li className=\"logout action\" onClick={logout}>\n            Logout\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React , { Fragment, useContext } from 'react';\r\nimport HomePage from './HomePage';\r\nimport TodoContext from './context/TodoContext';\r\nimport Navigation from './Navigation';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n  const todoContext = useContext(TodoContext);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={`app ${todoContext.theme ? todoContext.theme : ''}`}>\r\n        <Navigation />\r\n        <HomePage />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\n    GET_SESSION,\n    SET_SESSION,\n    GET_THEME,\n    SET_THEME,\n    GET_TODO,\n    SET_TODO,\n    UPDATE_TODO,\n    TOGGLE_TODO,\n    DELETE_TODO,\n    SET_LOGOUT,\n    STATUS_FILTER,\n    ORDER_FILTER,\n    REFRESH_TASKS,\n    REPORT_ERROR,\n    DONE_FILTER,\n    NETWORK_ERROR\n} from './types';\n\nimport constants from './Constants';\n\nexport default (state, action) => {\n    state = { ...state, error: '', networkError: '' };\n    switch (action.type) {\n        case GET_SESSION:\n            if (!action.data.username) {\n                return {\n                    ...state,\n                    isLoggedIn: constants.FALSE,\n                }\n            }\n            return {\n                ...state,\n                isLoggedIn: constants.TRUE,\n                username: action.data.username,\n                theme: action.data.theme\n            }\n        case SET_SESSION:\n            return {\n                ...state,\n                username: action.data,\n                isLoggedIn: constants.TRUE\n            }\n        case SET_LOGOUT:\n            return {\n                ...state,\n                isLoggedIn: constants.FALSE,\n                tasks: {},\n                theme: constants.DEFAULT_THEME\n            }\n        case GET_THEME:\n            return {\n                ...state,\n                theme: action.data\n            }\n        case SET_THEME:\n            return {\n                ...state,\n                theme: action.data\n            }\n        case GET_TODO:\n            return {\n                ...state,\n                tasks: action.data\n            }\n        case SET_TODO:\n            return {\n                ...state,\n                tasks: {\n                    ...state.tasks,\n                    [action.data.taskId]: {\n                        name: action.data.name,\n                        done: action.data.done,\n                        taskId: action.data.taskId\n                    }\n                }\n            }\n        case TOGGLE_TODO:\n            return {\n                ...state,\n                tasks: {\n                    ...state.tasks,\n                    [action.data.taskId]: { ...action.data }\n                }\n            }\n        case DELETE_TODO:\n            return {\n                ...state,\n                tasks: action.data\n            }\n        case UPDATE_TODO:\n            return {\n                ...state,\n                tasks: {\n                    ...state.tasks,\n                    [action.data.taskId]: { ...action.data, name: action.data.name }\n                }\n            }\n        case STATUS_FILTER:\n            return {\n                ...state,\n                taskStatusFilter: action.data\n            }\n        case ORDER_FILTER:\n            return {\n                ...state,\n                taskOrderFilter: action.data\n            }\n        case REFRESH_TASKS:\n            return {\n                ...state,\n                taskStatusFilter: constants.ALL,\n                taskOrderFilter: constants.SELECT,\n                taskDoneFilter: constants.SELECT\n            }\n        case DONE_FILTER:\n            return {\n                ...state,\n                taskDoneFilter: action.data.status,\n                taskStatusFilter: constants.ALL,\n                taskOrderFilter: constants.SELECT,\n            }\n        case REPORT_ERROR:\n            return {\n                ...state,\n                error: action.data,\n            }\n        case NETWORK_ERROR:\n            return {\n                ...state,\n                networkError: action.data,\n                isLoggedIn: constants.FALSE\n            }\n        default:\n            return state;\n    }\n};\n\n","export const SET_SESSION = 'SET_SESSION';\nexport const GET_SESSION = 'GET_SESSION';\nexport const SET_LOGOUT = 'SET_LOGOUT';\nexport const SET_THEME = 'SET_THEME';\nexport const GET_THEME = 'GET_THEME';\nexport const SET_TODO = 'SET_TODO';\nexport const GET_TODO = 'GET_TODO';\nexport const UPDATE_TODO = 'UPDATE_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const STATUS_FILTER = 'STATUS_FILTER';\nexport const ORDER_FILTER = 'ORDER_FILTER';\nexport const REFRESH_TASKS = 'REFRESH_TASKS';\nexport const REPORT_ERROR = 'REPORT_ERROR';\nexport const NETWORK_ERROR = 'NETWORK_ERROR';\nexport const DONE_FILTER = 'DONE_FILTER';","const messages = {\n    DEFAULT: 'Oops! Something went wrong, please try again!',\n    NETWORK_ERROR: 'Problem connecting to your network, please try again!',\n    USERNAME_MANDATORY: '* Username is mandatory',\n    TASK_MANDATORY: '* Task name cannot be empty!',\n    'action not permitted': 'Unauthorized user. Please try valid username!',\n    'login denied': '* Login required to see the content.',\n    'failed to update': 'Failed to update task! Please enter correct data.',\n    'no such taskId': 'Error! Task does not exist.',\n    'no valid session': 'No Session found! Please login again.',\n    'no tasks for user': 'No tasks found!',\n};\n\nexport default messages;\n","const getNetworkError = (err) => {\n    return {\n        code: 'NETWORK-ERROR',\n        err\n    };\n};\n\nconst validateResponse = (response) => {\n    if (!response.ok) {\n        return response.json().then((err) => Promise.reject(err));\n    }\n    return response.json();\n}\n\nexport const fetchStatus = () => {\n    return fetch('/session', {\n        method: 'GET',\n    })\n        .catch(getNetworkError)\n        .then((validateResponse))\n};\n\nexport const fetchLoginPage = (username) => {\n    return fetch('/session', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ username }),\n    })\n        .catch(getNetworkError)\n        .then((validateResponse))\n};\n\nexport const fetchLogoutPage = () => {\n    return fetch('/session', {\n        method: 'DELETE',\n    })\n        .catch(getNetworkError)\n        .then((validateResponse))\n};\n\nexport const fetchPageTheme = (username) => {\n    return fetch(`/theme/${username}`, {\n        method: 'GET',\n    })\n        .catch(getNetworkError)\n        .then(validateResponse)\n};\n\nexport const fetchUpdateTheme = (username, theme) => {\n    return fetch(`/theme/${username}`, {\n        method: 'PUT',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ theme }),\n    })\n        .catch(getNetworkError)\n        .then(validateResponse)\n};\n\nexport const fetchTodoList = (username) => {\n    return fetch(`/tasks/${username}`, {\n        method: 'GET',\n    })\n        .catch(getNetworkError)\n        .then(validateResponse)\n}\n\nexport const fetchAppendTask = (username, task) => {\n    return fetch(`/tasks/${username}`, {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ task })\n    })\n        .catch(getNetworkError)\n        .then(validateResponse)\n};\n\nexport const fetchRemoveTask = (username, taskId) => {\n    return fetch(`/tasks/${username}/${taskId}`, {\n        method: 'DELETE'\n    })\n        .catch(getNetworkError)\n        .then(validateResponse)\n}\n\nexport const fetchUpdateTask = (username, taskId, task) => {\n    return fetch(`/tasks/${username}/${taskId}`, {\n        method: 'PUT',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ task })\n    })\n        .catch(getNetworkError)\n        .then(validateResponse)\n}","import React, { useReducer } from 'react';\nimport TodoReducer from './TodoReducer';\nimport TodoContext from './TodoContext';\nimport messages from '../messages';\nimport constants from './Constants';\nimport {\n    GET_SESSION,\n    SET_SESSION,\n    SET_LOGOUT,\n    GET_THEME,\n    SET_THEME,\n    GET_TODO,\n    SET_TODO,\n    TOGGLE_TODO,\n    UPDATE_TODO,\n    DELETE_TODO,\n    STATUS_FILTER,\n    ORDER_FILTER,\n    REFRESH_TASKS,\n    REPORT_ERROR,\n    DONE_FILTER,\n    NETWORK_ERROR\n} from './types';\n\nimport {\n    fetchStatus,\n    fetchLoginPage,\n    fetchPageTheme,\n    fetchUpdateTheme,\n    fetchLogoutPage,\n    fetchTodoList,\n    fetchAppendTask,\n    fetchRemoveTask,\n    fetchUpdateTask\n} from '../services';\n\n\nconst TodoState = (props) => {\n    const initialState = {\n        isLoggedIn: false,\n        username: '',\n        theme: '',\n        tasks: {},\n        taskOrderFilter: constants.SELECT,\n        taskStatusFilter: constants.ALL,\n        taskDoneFilter: constants.SELECT,\n        error: '',\n        networkError: ''\n    }\n    const [state, dispatch] = useReducer(TodoReducer, initialState);\n\n    const getLoginStatus = () => {\n        fetchStatus().then((userInfo) => {\n            dispatch({ type: GET_SESSION, data: userInfo.data });\n        })\n            .catch(err => {\n                dispatch({ type: NETWORK_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const setLoginStatus = (username) => {\n        if (!username) {\n            dispatch({ type: NETWORK_ERROR, data: messages.USERNAME_MANDATORY });\n        } else {\n            fetchLoginPage(username)\n                .then(() => {\n                    dispatch({ type: SET_SESSION, data: username });\n                })\n                .catch(err => {\n                    dispatch({ type: NETWORK_ERROR, data: messages[err.code] });\n                });\n        }\n    }\n\n    const setLogout = () => {\n        fetchLogoutPage()\n            .then(() => {\n                dispatch({ type: SET_LOGOUT })\n            })\n            .catch(err => {\n                dispatch({ type: NETWORK_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const getTheme = (username) => {\n        fetchPageTheme(username).then((themeInfo) => {\n            dispatch({ type: GET_THEME, data: themeInfo.data })\n        })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const setTheme = (username, themeVal) => {\n        fetchUpdateTheme(username, themeVal).then(() => {\n            dispatch({ type: SET_THEME, data: themeVal })\n        })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const getAllTasks = (username) => {\n        fetchTodoList(username).then((taskInfo) => {\n            dispatch({ type: GET_TODO, data: taskInfo.data });\n        })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const addNewTask = (username, taskName) => {\n        const task = {\n            name: taskName,\n            done: false\n        }\n        if (!taskName) {\n            dispatch({ type: REPORT_ERROR, data: messages.TASK_MANDATORY });\n        }\n        else {\n            fetchAppendTask(username, task)\n                .then((taskInfo) => {\n                    dispatch({ type: SET_TODO, data: taskInfo.data });\n                })\n                .catch(err => {\n                    dispatch({ type: NETWORK_ERROR, data: messages[err.message] });\n                });\n        }\n    }\n\n    const toggleTodo = (id) => {\n        state.tasks[id].done = !state.tasks[id].done;\n        const task = state.tasks[id];\n        fetchUpdateTask(state.username, id, task)\n            .then((taskInfo) => {\n                dispatch({ type: TOGGLE_TODO, data: taskInfo.data })\n            })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const deleteTask = (id) => {\n        fetchRemoveTask(state.username, id)\n            .then((task) => {\n                const remove = removeTaskByKey(task.data)\n                dispatch({ type: DELETE_TODO, data: remove })\n            })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const removeTaskByKey = (task) => {\n        return Object.assign(\n            {},\n            ...Object.entries(state.tasks)\n                .filter(([k]) => k !== task.taskId)\n                .map(([k, v]) => ({ [k]: v })));\n    }\n\n    const updateTask = (id, text) => {\n        const task = state.tasks[id];\n        state.tasks[id].name = text;\n        fetchUpdateTask(state.username, id, task)\n            .then((taskInfo) => {\n                dispatch({ type: UPDATE_TODO, data: taskInfo.data })\n            })\n            .catch(err => {\n                dispatch({ type: REPORT_ERROR, data: messages[err.code] });\n            });\n    }\n\n    const filterTasksByStatus = (status) => {\n        dispatch({ type: STATUS_FILTER, data: status })\n    }\n\n    const sortTasksByOrder = (status) => {\n        let tasks = '';\n        if (status === constants.ASCENDING) {\n            tasks = sortTasksByAsc();\n        } else if (status === constants.DESCENDING) {\n            tasks = sortTasksByDesc();\n        }\n        state.tasks = getObjectList(tasks);\n        dispatch({ type: ORDER_FILTER, data: status })\n    }\n\n    const sortTasksByAsc = () => {\n        return Object.values(state.tasks).sort((a, b) => {\n            if (a.name < b.name) {\n                return -1;\n            }\n            else if (a.name > b.name) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        })\n    };\n\n    const sortTasksByDesc = () => {\n        return Object.values(state.tasks).sort((a, b) => {\n            if (a.name < b.name) {\n                return 1;\n            }\n            else if (a.name > b.name) {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        })\n    };\n\n    const getObjectList = (list) => {\n        let task = {};\n        return list.reduce((obj, item) => {\n            return {\n                ...obj,\n                [item.taskId]: item,\n            };\n        }, task);\n    }\n\n    const refreshTasks = () => {\n        dispatch({ type: REFRESH_TASKS });\n    }\n\n    const sortTasksByDone = (status) => {\n        let tasks = {};\n        if (status === constants.DONE) {\n            tasks = sortByDone();\n        } else if (status === constants.NOTDONE) {\n            tasks = sortByNotDone();\n        }\n        state.tasks = getObjectList(tasks);\n        dispatch({ type: DONE_FILTER, data: status });\n    }\n\n    const sortByDone = () => {\n        return Object.values(state.tasks).sort((a, b) => {\n            if (a.done < b.done) {\n                return 1;\n            }\n            else if (a.done > b.done) {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        })\n    }\n\n    const sortByNotDone = () => {\n        return Object.values(state.tasks).sort((a, b) => {\n            if (a.done < b.done) {\n                return -1;\n            }\n            else if (a.done > b.done) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        })\n    }\n\n    return (\n        <TodoContext.Provider\n            value={{\n                isLoggedIn: state.isLoggedIn,\n                username: state.username,\n                theme: state.theme,\n                tasks: state.tasks,\n                taskOrderFilter: state.taskOrderFilter,\n                taskStatusFilter: state.taskStatusFilter,\n                taskDoneFilter: state.taskDoneFilter,\n                error: state.error,\n                networkError: state.networkError,\n                getLoginStatus,\n                setLoginStatus,\n                setTheme,\n                getTheme,\n                setLogout,\n                getAllTasks,\n                addNewTask,\n                toggleTodo,\n                deleteTask,\n                updateTask,\n                filterTasksByStatus,\n                sortTasksByOrder,\n                refreshTasks,\n                sortTasksByDone\n            }}\n        >\n            {props.children}\n        </TodoContext.Provider>\n    )\n}\n\nexport default TodoState;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport TodoState from './context/TodoState';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  <TodoState>  \r\n    <App />\r\n  </TodoState>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}